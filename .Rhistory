?apply
?matrix
x <- matrix (1:10, 2, 5)
x
apply(x, 2, mean)
?noise
??noise
library(datasets)
data(iris)
?iris
head(iris)
iris
mean(iris$virginica)
mean($Sepal.length, where(iris$Species = 'virginica'))
mean(iris$Sepal.length, where(iris$Species = 'virginica'))
mean(iris$Sepal.length, where(iris$Species == 'virginica'))
?str
3iris
?iris
iris3
apply(1,2, mean)
apply(iris3, c(1,2), mean)
apply(iris3, c(1,3), mean)
apply(iris3, c(2,3), mean)
head(iris
)
colMeans(iris)
colMeans(iris, 1:4)
?colMeans
colMeans(iris, [1:4])
colMeans(iris[1:4])
apply(iris[,1:4], 2, mean)
?apply
apply(iris[1:4], 2, mean)
a <- apply(iris[1:4], 2, mean)
class(a)
b<-colMeans(iris[1:4])
class(b)
apply(iris, 1, mean)
?class
library(datasets)
data(mtcars)
head(mtcars)
?tapply
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
?with
with(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
with(mtcars, tapply(mpg, cyl, range))
with(mtcars, tapply(hp, cyl, mean))
82.63636-209.21429
debug(ls)
ls
?debug
end
?debug
corr <- function(directory, threshold = 0, id=1:332) {
files <- list.files(directory, full.names=TRUE)
answer <- vector()
for (i in 1:length(files)) {
current <- read.csv(files[i])
count <- sum(complete.cases(current))
if(count > threshold) {
correlation <- cor(current[,2], current[,3], use="pairwise.complete.obs")
answer <- rbind(answer, correlation)
}
}
return(answer)
}
?Browse
?<<-
<<-
?message
---
title: "HelloWorld"
author: "MichaelGreen"
date: "February 21, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## This is a markdown file
---
title: "HelloWorld"
author: "MichaelGreen"
date: "February 21, 2015"
output: html_document
---
## This is a markdown file
)
x <- matrix(1:4, 2, 2)
x
solve(x)
x<- 1:10
xx <-makeVector(x)
## example from github
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## example from github
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- makeVector(c(1,2,3))
x$get()
cachemean(x)
cachemean(x)
lm
lm <- function(x) {x*x}
lm
get
list
x <- makeVector(1:4)
set
set(1)
x$getmean()
x$get()
data <- x$get()
m <- mean(data)
m
x$setmean(m)
d <- list(set = set, get = get,
setmean = setmean,
getmean = getmean)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
z <- make.power(3)
z
z(2)
y <- 10
f <- function(x) {
y <-2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
## example from github
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## example from github
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
> x <- makeVector(c(1,2,3))
> x$get()
x<-makeVector(1:3)
x
x$get
x<-makeVector(c(1,2,3))
x$get()
x$getmean()
cachemean(x)
x$getmean()
get
get()
m
d<-x$setmean(m)
d
x$set(c(4,5,6))
x$get()
x
cachemean(x)
cachemean(x)
x<- makeVector(c(1,2,3))
x[1]
x$setmean(y<-1:5)
x$getmean()
yu <- function(mean)
{}
## example from github
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## example from github
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting inversed matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
x <- matrix(1:4, 2, 2)
x
z <- solve(x)
z
makeMatrix(x)
cacheSolve(x)
xx <- makeMatrix(x)
xxx <- cacheSolve(xx)
x
z
xxx
x%*%z
source('~/Desktop/R Files/sigcourse/ProgrammingAssignment2.R')
